# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

secrets: {}
config: {}

image:
  repository: stevenxie/api
  tag: latest
  pullPolicy: Always

replicaCount: 1
resources: {}
nodeSelector: {}
tolerations: []
affinity: {}

deployment:
  port: 3000
  labels: &labels
    tier: backend
  strategy: &strategy
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 25%
  minReadySeconds: 5

service:
  type: ClusterIP
  port: 3000
  labels: *labels

ingress:
  enabled: true
  host: api.example.127.0.0.1.xip.io
  annotations: {}
    # ingress.kubernetes.io/custom-response-headers: "X-Service:merlin"
  labels: []
  tls: []


varnish:
  enabled: true
  image:
    repository: cooptilleuls/varnish
    tag: 6.0.0-alpine
    pullPolicy: IfNotPresent

  replicaCount: 1
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

  storage:
    size: 100M
    hostPath: /tmp/api-varnish_storage.bin

  deployment:
    port: 80
    labels: &varnish-labels
      tier: proxy
    strategy: *strategy
    minReadySeconds: 5

  service:
    type: ClusterIP
    port: 80
    labels: *varnish-labels

  config: |-
    vcl 4.0;

    backend default {
      .host = "api";
      .port = "3000";
    }

    sub vcl_backend_response {
      set beresp.ttl = 120s;
    }

    sub vcl_recv {
      unset req.http.X-Body-Len;

      ## Remove has_js and Cloudflare/Google Analytics __* cookies, and
      ## normalize cookies.
      set req.http.Cookie = regsuball(req.http.Cookie,
        "(^|;\s*)(_[_a-z]+|has_js)=[^;]*", "");
      set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
      if (req.http.Cookie ~ "^ *$") {
        unset req.http.Cookie;
      }

      if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
      }

      if (req.http.Authorization) {
        return (pass);
      }

      if (req.http.X-Force-Backend) {
        return (pass);
      }
    }

    sub vcl_deliver {
      unset resp.http.Via;
      return (deliver);
    }


jobserver:
  enabled: true

  image:
    repository: stevenxie/api-jobs
    tag: latest
    pullPolicy: Always

  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: {}

  deployment:
    labels: []
    strategy: *strategy
    minReadySeconds: 5

jobserver-ui:
  enabled: false
  namespace: api
  redisAddr: ":6432"

  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: {}

  image:
    repository: stevenxie/api-jobs-ui
    tag: latest
    pullPolicy: Always

  deployment:
    port: 80
    labels: &jobserver-ui-labels
      tier: frontend
    strategy: *strategy
    minReadySeconds: 5

  service:
    type: ClusterIP
    port: 80
    labels: *jobserver-ui-labels

